{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"DXRAM User Documentation For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. Project layout","title":"Home"},{"location":"#dxram-user-documentation","text":"For full documentation visit mkdocs.org .","title":"DXRAM User Documentation"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"#project-layout_1","text":"","title":"Project layout"},{"location":"docs/","text":"","title":"Documentation"},{"location":"overview/","text":"","title":"GitHub Repositories"},{"location":"technical/","text":"Technical Guidance Introduction Scope Purpose The main purpose of this document is to guide the development team in setting up a development environment for the DXRAM project. It also defines standards and best practices for the developers to follow using certain tools, third party libraries and policies. Development Environment Setup Oracle JDK / Open JDK Download the latest Java 8 Oracle JDK jdk-8u202-linux-x64.tar.gz and follow the instructions here for installation. To put it in a nutshell, extract the tar (do it all as root via sudo su ) sudo su tar xzf jdk-8u202-linux-x64.tar.gz move it into /opt mkdir /opt/Oracle_Java mv jdk1.8.0_202 /opt/Oracle_Java and update the system accordingly (replace VERSION with the one you downloaded, currently 202) update-alternatives --install /usr/bin/java java /opt/Oracle_Java/jdk1.8.0_VERSION/bin/java 1 update-alternatives --install /usr/bin/javac javac /opt/Oracle_Java/jdk1.8.0_VERSION/bin/javac 1 update-alternatives --install /usr/bin/javaws javaws /opt/Oracle_Java/jdk1.8.0_VERSION/bin/javaws 1 update-alternatives --install /usr/bin/jar jar /opt/Oracle_Java/jdk1.8.0_VERSION/bin/jar 1 update-alternatives --set java /opt/Oracle_Java/jdk1.8.0_VERSION/bin/java update-alternatives --set javac /opt/Oracle_Java/jdk1.8.0_VERSION/bin/javac update-alternatives --set javaws /opt/Oracle_Java/jdk1.8.0_VERSION/bin/javaws update-alternatives --set jar /opt/Oracle_Java/jdk1.8.0_VERSION/bin/jar Finally test the installation via $ java -version java version 1.8.0_202 Java ( TM ) SE Runtime Environment ( build 1 .8.0_202-b08 ) Java HotSpot ( TM ) 64 -Bit Server VM ( build 25 .202-b08, mixed mode ) IDE Other tools Build Automation with Gradle Distribution Debugging Git Workflow To prepare the environment make sure git is installed and configured properly. sudo apt install git It is highly recommended to work with SSH keys. This aproach will save your time alot. An article about generating a new SSH key and adding it to the ssh-agent can be found here . Afterwards add your SSH key to your GitHub account and test the connection. To finish the configuration add your email and name in the global scope. This information will appear in the commit history. git config --global user.email your@email.com git config --global user.name Your Name Forks and Remote Repositories First create a workspace directory in your home: cd mkdir workspace cd workspace Now fork your own copy of hhu-bsinfo/dxram to your account. Additionally it could be helpful to fork all other DXRAM repositories you are going to work with as well. Tip If you are going to develop something within DXRAM (changing DXRAM code), there is no way to circumvent the development branch. However, in case you are developing an independent piece of software with DXRAM as dependency, working with the master branch might be an option. Time to clone all forked copies: git clone --branch = development git@github.com: you /dxram.git Adding the original repository https://github.com/hhu-bsinfo/dxram.git to git $ git remote add shared https://github.com/hhu-bsinfo/dxram.git $ git fetch --all Fetching origin Fetching shared From https://github.com/hhu-bsinfo/dxram * [ new branch ] development - shared/development * [ new branch ] master - shared/master * [ new tag ] 0 .3.1 - 0 .3.1 * [ new tag ] 0 .5.0 - 0 .5.0 * [ new tag ] 0 .6.0 - 0 .6.0 * [ new tag ] 0 .7.0 - 0 .7.0 * [ new tag ] v0.4.0 - v0.4.0 allows you to get updates from the shared upstream, i.e. you want to keep origin/development up to date with shared/development . Checkout a new branch git checkout -b shared_development shared/development to create a local read-only copy of the shared upstream. When it's time to get updates git checkout development git merge shared_development --ff-only make sure you are on the right branch and you do fast-forward merge only! The origin/development branch can be used to provide a small bugfix, but the favored solution is to go with a new origin/bugfix or origin/feature branch. In both cases a Pull request is the appropriate strategy. The git rebase command will help you in case your pull request is outdated because of new commits from other contributors. Tips It is a bad practice to commit some semi-finished changes (or have several different changes in one commit), but what to do in case you have to leave or switch the place which implies the need to commit and push changes upstream? Well, there is a simple solution to that. Just do it, but leave a special hint in the message which is often refered as work in progress : git add . git commit -m WIP: whatever I started to do git push Whenever the work is finished the last commit (WIP) should be replaced via git commit --amend and the message 'WIP: whatever I started to do' can be edited in the text-editor that opens automatically (e.g. nano or vim ). The drawback or complication of this workflow is that you will need to foce git push -f and in case of working with multiple workstation also git pull --rebase will be necessary. So, make sure you know what you are doing! Some other advanced but helpful technics are for instance stash and cherry-pick . Best sources and documentation for git: git help command and the official docs . Development Guidelines Public APIs Internal APIs Development Conventions and Best Practices Testing and Deployment JUnit Tests extTests Configuration HHUBS Cluster sollipulli HHU Cluster HILBERT","title":"Technical Guidance"},{"location":"technical/#technical-guidance","text":"","title":"Technical Guidance"},{"location":"technical/#introduction","text":"","title":"Introduction"},{"location":"technical/#scope","text":"","title":"Scope"},{"location":"technical/#purpose","text":"The main purpose of this document is to guide the development team in setting up a development environment for the DXRAM project. It also defines standards and best practices for the developers to follow using certain tools, third party libraries and policies.","title":"Purpose"},{"location":"technical/#development-environment","text":"","title":"Development Environment"},{"location":"technical/#setup","text":"","title":"Setup"},{"location":"technical/#oracle-jdk-open-jdk","text":"Download the latest Java 8 Oracle JDK jdk-8u202-linux-x64.tar.gz and follow the instructions here for installation. To put it in a nutshell, extract the tar (do it all as root via sudo su ) sudo su tar xzf jdk-8u202-linux-x64.tar.gz move it into /opt mkdir /opt/Oracle_Java mv jdk1.8.0_202 /opt/Oracle_Java and update the system accordingly (replace VERSION with the one you downloaded, currently 202) update-alternatives --install /usr/bin/java java /opt/Oracle_Java/jdk1.8.0_VERSION/bin/java 1 update-alternatives --install /usr/bin/javac javac /opt/Oracle_Java/jdk1.8.0_VERSION/bin/javac 1 update-alternatives --install /usr/bin/javaws javaws /opt/Oracle_Java/jdk1.8.0_VERSION/bin/javaws 1 update-alternatives --install /usr/bin/jar jar /opt/Oracle_Java/jdk1.8.0_VERSION/bin/jar 1 update-alternatives --set java /opt/Oracle_Java/jdk1.8.0_VERSION/bin/java update-alternatives --set javac /opt/Oracle_Java/jdk1.8.0_VERSION/bin/javac update-alternatives --set javaws /opt/Oracle_Java/jdk1.8.0_VERSION/bin/javaws update-alternatives --set jar /opt/Oracle_Java/jdk1.8.0_VERSION/bin/jar Finally test the installation via $ java -version java version 1.8.0_202 Java ( TM ) SE Runtime Environment ( build 1 .8.0_202-b08 ) Java HotSpot ( TM ) 64 -Bit Server VM ( build 25 .202-b08, mixed mode )","title":"Oracle JDK / Open JDK"},{"location":"technical/#ide","text":"","title":"IDE"},{"location":"technical/#other-tools","text":"","title":"Other tools"},{"location":"technical/#build-automation-with-gradle","text":"","title":"Build Automation with Gradle"},{"location":"technical/#distribution","text":"","title":"Distribution"},{"location":"technical/#debugging","text":"","title":"Debugging"},{"location":"technical/#git-workflow","text":"To prepare the environment make sure git is installed and configured properly. sudo apt install git It is highly recommended to work with SSH keys. This aproach will save your time alot. An article about generating a new SSH key and adding it to the ssh-agent can be found here . Afterwards add your SSH key to your GitHub account and test the connection. To finish the configuration add your email and name in the global scope. This information will appear in the commit history. git config --global user.email your@email.com git config --global user.name Your Name","title":"Git Workflow"},{"location":"technical/#forks-and-remote-repositories","text":"First create a workspace directory in your home: cd mkdir workspace cd workspace Now fork your own copy of hhu-bsinfo/dxram to your account. Additionally it could be helpful to fork all other DXRAM repositories you are going to work with as well. Tip If you are going to develop something within DXRAM (changing DXRAM code), there is no way to circumvent the development branch. However, in case you are developing an independent piece of software with DXRAM as dependency, working with the master branch might be an option. Time to clone all forked copies: git clone --branch = development git@github.com: you /dxram.git Adding the original repository https://github.com/hhu-bsinfo/dxram.git to git $ git remote add shared https://github.com/hhu-bsinfo/dxram.git $ git fetch --all Fetching origin Fetching shared From https://github.com/hhu-bsinfo/dxram * [ new branch ] development - shared/development * [ new branch ] master - shared/master * [ new tag ] 0 .3.1 - 0 .3.1 * [ new tag ] 0 .5.0 - 0 .5.0 * [ new tag ] 0 .6.0 - 0 .6.0 * [ new tag ] 0 .7.0 - 0 .7.0 * [ new tag ] v0.4.0 - v0.4.0 allows you to get updates from the shared upstream, i.e. you want to keep origin/development up to date with shared/development . Checkout a new branch git checkout -b shared_development shared/development to create a local read-only copy of the shared upstream. When it's time to get updates git checkout development git merge shared_development --ff-only make sure you are on the right branch and you do fast-forward merge only! The origin/development branch can be used to provide a small bugfix, but the favored solution is to go with a new origin/bugfix or origin/feature branch. In both cases a Pull request is the appropriate strategy. The git rebase command will help you in case your pull request is outdated because of new commits from other contributors.","title":"Forks and Remote Repositories"},{"location":"technical/#tips","text":"It is a bad practice to commit some semi-finished changes (or have several different changes in one commit), but what to do in case you have to leave or switch the place which implies the need to commit and push changes upstream? Well, there is a simple solution to that. Just do it, but leave a special hint in the message which is often refered as work in progress : git add . git commit -m WIP: whatever I started to do git push Whenever the work is finished the last commit (WIP) should be replaced via git commit --amend and the message 'WIP: whatever I started to do' can be edited in the text-editor that opens automatically (e.g. nano or vim ). The drawback or complication of this workflow is that you will need to foce git push -f and in case of working with multiple workstation also git pull --rebase will be necessary. So, make sure you know what you are doing! Some other advanced but helpful technics are for instance stash and cherry-pick . Best sources and documentation for git: git help command and the official docs .","title":"Tips"},{"location":"technical/#development-guidelines","text":"","title":"Development Guidelines"},{"location":"technical/#public-apis","text":"","title":"Public APIs"},{"location":"technical/#internal-apis","text":"","title":"Internal APIs"},{"location":"technical/#development-conventions-and-best-practices","text":"","title":"Development Conventions and Best Practices"},{"location":"technical/#testing-and-deployment","text":"","title":"Testing and Deployment"},{"location":"technical/#junit-tests","text":"","title":"JUnit Tests"},{"location":"technical/#exttests","text":"","title":"extTests"},{"location":"technical/#configuration","text":"","title":"Configuration"},{"location":"technical/#hhubs-cluster-sollipulli","text":"","title":"HHUBS Cluster sollipulli"},{"location":"technical/#hhu-cluster-hilbert","text":"","title":"HHU Cluster HILBERT"}]}